{
  "notes": [
    {
      "id": "note_1",
      "title": "EC2 Instance Types Overview",
      "category": "EC2",
      "certification": "Solutions Architect",
      "content": "## EC2 Instance Types\n\n### General Purpose\n- **T3/T4g**: Burstable performance, credit-based\n- **M5/M6i**: Balanced compute, memory, networking\n\n### Compute Optimized\n- **C5/C6i**: High-performance processors\n- Best for CPU-intensive applications\n\n### Memory Optimized\n- **R5/R6i**: High memory-to-vCPU ratio\n- **X1e**: High memory instances\n\n### Storage Optimized\n- **I3**: NVMe SSD-backed instance storage\n- **D2**: Dense HDD storage\n\n### Key Points for Exam\n- Choose based on workload requirements\n- Consider cost vs performance\n- Understand use cases for each family",
      "tags": ["instance-types", "compute", "exam-tip"],
      "createdAt": "2025-06-15T10:30:00Z",
      "updatedAt": "2025-06-15T10:30:00Z"
    },
    {
      "id": "note_2", 
      "title": "VPC Peering Best Practices",
      "category": "VPC",
      "certification": "Solutions Architect",
      "content": "## VPC Peering Connection\n\n### Key Concepts\n- Non-transitive relationship\n- No overlapping CIDR blocks\n- Cross-region peering supported\n\n### Limitations\n- No edge-to-edge routing\n- DNS resolution must be enabled on both VPCs\n- Security group rules need updates\n\n### Best Practices\n1. Use descriptive names for peering connections\n2. Update route tables on both sides\n3. Configure security groups properly\n4. Consider Transit Gateway for complex topologies\n\n### Exam Tips\n- Remember transitive routing is NOT supported\n- Overlapping CIDRs prevent peering\n- Charges apply for cross-AZ traffic",
      "tags": ["vpc", "networking", "peering", "exam-tip"],
      "createdAt": "2025-06-14T14:15:00Z",
      "updatedAt": "2025-06-14T14:15:00Z"
    },
    {
      "id": "note_3",
      "title": "Lambda Cold Start Optimization",
      "category": "Lambda",
      "certification": "Developer",
      "content": "## Lambda Cold Start Optimization\n\n### What Causes Cold Starts\n- First invocation after deployment\n- Function not invoked for extended period\n- Scaling up (new concurrent executions)\n\n### Optimization Strategies\n\n#### 1. Minimize Package Size\n- Remove unused dependencies\n- Use Lambda Layers for shared code\n- Optimize imports (Python: import only what you need)\n\n#### 2. Choose Runtime Wisely\n- Node.js and Python generally faster cold starts\n- Java and .NET have longer cold starts\n- Use provisioned concurrency for predictable latency\n\n#### 3. Memory Configuration\n- More memory = more CPU and faster cold starts\n- Sweet spot often around 1024MB\n\n#### 4. Connection Reuse\n- Initialize connections outside handler\n- Reuse database connections\n- Cache expensive computations\n\n### Exam Points\n- Cold start affects first request only\n- Provisioned concurrency eliminates cold starts\n- Memory affects both performance and cost",
      "tags": ["lambda", "performance", "cold-start", "optimization"],
      "createdAt": "2025-06-13T09:45:00Z",
      "updatedAt": "2025-06-13T16:20:00Z"
    }
  ],
  "categories": {
    "EC2": 1,
    "VPC": 1, 
    "Lambda": 1
  },
  "totalNotes": 3,
  "lastUpdated": "2025-06-15T10:30:00Z"
}